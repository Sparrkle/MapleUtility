<UserControl
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:MapleUtility.Plugins.Views.UserControls"
             xmlns:telerik="http://schemas.telerik.com/2008/xaml/presentation"
             xmlns:telerik1="clr-namespace:Telerik.Windows.Controls;assembly=Telerik.Windows.Controls"
             xmlns:mat="clr-namespace:Telerik.Windows.Controls.MaterialControls;assembly=Telerik.Windows.Controls"
             xmlns:Helpers="clr-namespace:Telerik.Windows.Controls.Theming.Helpers;assembly=Telerik.Windows.Controls" x:Class="MapleUtility.Plugins.Views.UserControls.UserControlVerusHillaHelper"
             mc:Ignorable="d" Background="#211d1e">

    <UserControl.Resources>
        <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource BaseTextBlockType}">
            <Setter Property="Foreground" Value="#f86475"/>
        </Style>
        <Style x:Key="RadButtonHillaStyle" TargetType="{x:Type telerik1:RadButton}" BasedOn="{StaticResource RadButtonStyle}">
            <Setter Property="BorderBrush" Value="#aad900"/>
            <Setter Property="Helpers:ThemeHelper.FocusBrush" Value="Transparent"/>
            <Setter Property="Helpers:ThemeHelper.MouseOverBrush" Value="#211518"/>
            <Setter Property="Helpers:ThemeHelper.PressedBrush" Value="#212121"/>
            <Setter Property="FontFamily" Value="{telerik1:FluentResource ResourceKey=FontFamily}"/>
            <Setter Property="FontSize" Value="{telerik1:FluentResource ResourceKey=FontSize}"/>
            <Setter Property="Foreground" Value="{telerik1:FluentResource ResourceKey=MarkerBrush}"/>
            <Setter Property="Background" Value="{telerik1:FluentResource ResourceKey=MainBrush}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Padding" Value="5"/>
            <Setter Property="CornerRadius" Value="{telerik1:FluentResource ResourceKey=CornerRadius}"/>
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="UseLayoutRounding" Value="True"/>
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type telerik1:RadButton}">
                        <Grid>
                            <Border x:Name="BorderVisual"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                Background="{TemplateBinding Background}"
                                CornerRadius="{TemplateBinding CornerRadius}"/>
                            <Border x:Name="FocusVisual"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                Visibility="Collapsed"
                                IsHitTestVisible="False"
                                BorderThickness="{telerik1:FluentResource ResourceKey=FocusThickness}"
                                BorderBrush="{TemplateBinding Helpers:ThemeHelper.FocusBrush}"
                                CornerRadius="{TemplateBinding CornerRadius}"/>
                            <mat:FluentControl
                                CornerRadius="{TemplateBinding CornerRadius}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                HorizontalContentAlignment="Stretch"
                                VerticalContentAlignment="Stretch">
                                <ContentPresenter x:Name="Content"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    RecognizesAccessKey="True"
                                    Focusable="False"
                                    TextBlock.Foreground="{TemplateBinding Foreground}"
                                    Margin="{TemplateBinding Padding}"
                                    ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                    ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                    Content="{TemplateBinding Content}"
                                    ContentTemplate="{TemplateBinding ContentTemplate}"/>
                            </mat:FluentControl>
                        </Grid>
                        <ControlTemplate.Triggers>

                            <!-- background is hidden -->
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsBackgroundVisible" Value="False"/>
                                    <Condition Property="IsEnabled" Value="True"/>
                                    <Condition Property="IsMouseOver" Value="False"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" Value="Transparent"/>
                                <Setter Property="BorderBrush" Value="Transparent"/>
                            </MultiTrigger>

                            <!-- General IsFocused setters -->
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsEnabled" Value="True"/>
                                    <Condition Property="IsKeyboardFocused" Value="True"/>
                                    <Condition Property="IsPressed" Value="False"/>
                                    <Condition Property="IsMouseOver" Value="False"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Visibility" TargetName="FocusVisual" Value="Visible"/>
                            </MultiTrigger>

                            <!-- general setters for IsMouseOver -->
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="BorderVisual" Property="Background" Value="{Binding (Helpers:ThemeHelper.MouseOverBrush), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                            </Trigger>

                            <!-- general setters for IsPressed -->
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="BorderVisual" Property="Background" Value="{Binding (Helpers:ThemeHelper.PressedBrush), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                            </Trigger>

                            <!-- disabled -->
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="Content" Property="Opacity" Value="{telerik1:FluentResource ResourceKey=DisabledOpacity}"/>
                                <Setter Property="Background" Value="#352f30"/>
                            </Trigger>

                            <!-- disabled and focused -->
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsEnabled" Value="False"/>
                                    <Condition Property="IsFocused" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="FocusVisual" Property="Visibility" Value="Collapsed"/>
                            </MultiTrigger>

                            <!-- disabled & background is hidden -->
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsEnabled" Value="False"/>
                                    <Condition Property="IsBackgroundVisible" Value="False"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" Value="Transparent"/>
                                <Setter Property="BorderBrush" Value="Transparent"/>
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="{x:Type telerik1:RadButton}" BasedOn="{StaticResource RadButtonHillaStyle}"/>
        <Style x:Key="RadSliderHillaStyle" TargetType="{x:Type telerik1:RadSlider}">
            <Setter Property="FontFamily" Value="{telerik1:FluentResource ResourceKey={x:Static telerik:FluentResourceKey.FontFamily}}"/>
            <Setter Property="FontSize" Value="{telerik1:FluentResource ResourceKey={x:Static telerik:FluentResourceKey.FontSize}}"/>
            <Setter Property="Background" Value="{telerik1:FluentResource ResourceKey={x:Static telerik:FluentResourceKey.PressedBrush}}"/>
            <Setter Property="TickTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <Rectangle Fill="{DynamicResource {x:Static telerik:FluentResourceKey.IconBrush}}" Height="3" ToolTip="{Binding}" Width="1"/>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="ThumbStyle">
                <Setter.Value>
                    <Style TargetType="{x:Type Thumb}">
                        <Setter Property="IsTabStop" Value="True"/>
                        <Setter Property="BorderThickness" Value="0"/>
                        <Setter Property="Helpers:ThemeHelper.CornerRadius" Value="4"/>
                        <Setter Property="Width" Value="8"/>
                        <Setter Property="Height" Value="18"/>
                        <Setter Property="Background" Value="#f86475"/>
                        <Setter Property="BorderBrush" Value="{telerik1:FluentResource ResourceKey={x:Static telerik:FluentResourceKey.AccentBrush}}"/>
                        <Setter Property="SnapsToDevicePixels" Value="True"/>
                        <Setter Property="Focusable" Value="True"/>
                        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Thumb}">
                                    <Border x:Name="BorderVisual" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding Helpers:ThemeHelper.CornerRadius}"/>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsFocused" Value="True">
                                            <Setter Property="BorderBrush" TargetName="BorderVisual" Value="#f86475"/>
                                            <Setter Property="Background" TargetName="BorderVisual" Value="#f86475"/>
                                        </Trigger>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="BorderBrush" TargetName="BorderVisual" Value="#f97c8b"/>
                                            <Setter Property="Background" TargetName="BorderVisual" Value="#f97c8b"/>
                                        </Trigger>
                                        <Trigger Property="IsDragging" Value="True">
                                            <Setter Property="BorderBrush" TargetName="BorderVisual" Value="#f74c5f"/>
                                            <Setter Property="Background" TargetName="BorderVisual" Value="#f74c5f"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Setter.Value>
            </Setter>
            <Setter Property="AlternateThumbStyle">
                <Setter.Value>
                    <Style TargetType="{x:Type Thumb}">
                        <Setter Property="IsTabStop" Value="True"/>
                        <Setter Property="BorderThickness" Value="0"/>
                        <Setter Property="Helpers:ThemeHelper.CornerRadius" Value="4"/>
                        <Setter Property="Width" Value="8"/>
                        <Setter Property="Height" Value="18"/>
                        <Setter Property="Background" Value="{telerik1:FluentResource ResourceKey={x:Static telerik:FluentResourceKey.AccentBrush}}"/>
                        <Setter Property="BorderBrush" Value="{telerik1:FluentResource ResourceKey={x:Static telerik:FluentResourceKey.AccentBrush}}"/>
                        <Setter Property="SnapsToDevicePixels" Value="True"/>
                        <Setter Property="Focusable" Value="True"/>
                        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Thumb}">
                                    <Border x:Name="BorderVisual" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding Helpers:ThemeHelper.CornerRadius}"/>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsFocused" Value="True">
                                            <Setter Property="BorderBrush" TargetName="BorderVisual" Value="{telerik1:FluentResource ResourceKey={x:Static telerik:FluentResourceKey.AccentFocusedBrush}}"/>
                                            <Setter Property="Background" TargetName="BorderVisual" Value="{telerik1:FluentResource ResourceKey={x:Static telerik:FluentResourceKey.AccentFocusedBrush}}"/>
                                        </Trigger>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="BorderBrush" TargetName="BorderVisual" Value="{telerik1:FluentResource ResourceKey={x:Static telerik:FluentResourceKey.AccentMouseOverBrush}}"/>
                                            <Setter Property="Background" TargetName="BorderVisual" Value="{telerik1:FluentResource ResourceKey={x:Static telerik:FluentResourceKey.AccentMouseOverBrush}}"/>
                                        </Trigger>
                                        <Trigger Property="IsDragging" Value="True">
                                            <Setter Property="BorderBrush" TargetName="BorderVisual" Value="{telerik1:FluentResource ResourceKey={x:Static telerik:FluentResourceKey.AccentPressedBrush}}"/>
                                            <Setter Property="Background" TargetName="BorderVisual" Value="{telerik1:FluentResource ResourceKey={x:Static telerik:FluentResourceKey.AccentPressedBrush}}"/>
                                        </Trigger>
                                        <Trigger Property="IsEnabled" Value="False">
                                            <Setter Property="BorderBrush" TargetName="BorderVisual" Value="{telerik1:FluentResource ResourceKey={x:Static telerik:FluentResourceKey.ComplementaryBrush}}"/>
                                            <Setter Property="Background" TargetName="BorderVisual" Value="{telerik1:FluentResource ResourceKey={x:Static telerik:FluentResourceKey.ComplementaryBrush}}"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Setter.Value>
            </Setter>
            <Setter Property="SelectionMiddleThumbStyle">
                <Setter.Value>
                    <Style TargetType="{x:Type Thumb}">
                        <Setter Property="Height" Value="2"/>
                        <Setter Property="Background" Value="{telerik1:FluentResource ResourceKey={x:Static telerik:FluentResourceKey.AccentBrush}}"/>
                        <Setter Property="BorderThickness" Value="0"/>
                        <Setter Property="BorderBrush" Value="{telerik1:FluentResource ResourceKey={x:Static telerik:FluentResourceKey.AccentBrush}}"/>
                        <Setter Property="SnapsToDevicePixels" Value="True"/>
                        <Setter Property="IsTabStop" Value="True"/>
                        <Setter Property="Focusable" Value="True"/>
                        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Thumb}">
                                    <Grid>
                                        <Border x:Name="BorderVisual" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"/>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsFocused" Value="True">
                                            <Setter Property="BorderBrush" TargetName="BorderVisual" Value="{telerik1:FluentResource ResourceKey={x:Static telerik:FluentResourceKey.AccentFocusedBrush}}"/>
                                            <Setter Property="Background" TargetName="BorderVisual" Value="{telerik1:FluentResource ResourceKey={x:Static telerik:FluentResourceKey.AccentFocusedBrush}}"/>
                                        </Trigger>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="BorderBrush" TargetName="BorderVisual" Value="{telerik1:FluentResource ResourceKey={x:Static telerik:FluentResourceKey.AccentMouseOverBrush}}"/>
                                            <Setter Property="Background" TargetName="BorderVisual" Value="{telerik1:FluentResource ResourceKey={x:Static telerik:FluentResourceKey.AccentMouseOverBrush}}"/>
                                        </Trigger>
                                        <Trigger Property="IsDragging" Value="True">
                                            <Setter Property="BorderBrush" TargetName="BorderVisual" Value="{telerik1:FluentResource ResourceKey={x:Static telerik:FluentResourceKey.AccentPressedBrush}}"/>
                                            <Setter Property="Background" TargetName="BorderVisual" Value="{telerik1:FluentResource ResourceKey={x:Static telerik:FluentResourceKey.AccentPressedBrush}}"/>
                                        </Trigger>
                                        <Trigger Property="IsEnabled" Value="False">
                                            <Setter Property="BorderBrush" TargetName="BorderVisual" Value="{telerik1:FluentResource ResourceKey={x:Static telerik:FluentResourceKey.ComplementaryBrush}}"/>
                                            <Setter Property="Background" TargetName="BorderVisual" Value="{telerik1:FluentResource ResourceKey={x:Static telerik:FluentResourceKey.ComplementaryBrush}}"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Setter.Value>
            </Setter>
            <Setter Property="TickBarStyle">
                <Setter.Value>
                    <Style TargetType="{x:Type telerik1:RadTickBar}">
                        <Setter Property="IsTabStop" Value="False"/>
                        <Setter Property="ItemsPanel">
                            <Setter.Value>
                                <ItemsPanelTemplate>
                                    <telerik1:TickBarPanel Background="Transparent" IsItemsHost="True"/>
                                </ItemsPanelTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Setter.Value>
            </Setter>
            <Setter Property="TrackStyle">
                <Setter.Value>
                    <Style TargetType="{x:Type ContentControl}">
                        <Setter Property="Height" Value="2"/>
                        <Setter Property="IsTabStop" Value="True"/>
                        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ContentControl}">
                                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Setter.Value>
            </Setter>
            <Setter Property="IncreaseHandleStyle">
                <Setter.Value>
                    <Style TargetType="{x:Type RepeatButton}">
                        <Setter Property="Margin" Value="4,0,0,0"/>
                        <Setter Property="ContentTemplate">
                            <Setter.Value>
                                <DataTemplate>
                                    <telerik1:RadGlyph Glyph="&#xE014;"/>
                                </DataTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.BasedOn>
                            <Style TargetType="{x:Type RepeatButton}">
                                <Setter Property="TextOptions.TextRenderingMode" Value="ClearType"/>
                                <Setter Property="Cursor" Value="Hand"/>
                                <Setter Property="IsTabStop" Value="True"/>
                                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                                <Setter Property="Foreground" Value="{telerik1:FluentResource ResourceKey={x:Static telerik:FluentResourceKey.IconBrush}}"/>
                                <Setter Property="Background" Value="Transparent"/>
                                <Setter Property="BorderBrush" Value="Transparent"/>
                                <Setter Property="SnapsToDevicePixels" Value="True"/>
                                <Setter Property="UseLayoutRounding" Value="False"/>
                                <Setter Property="BorderThickness" Value="1"/>
                                <Setter Property="Width" Value="16"/>
                                <Setter Property="Height" Value="16"/>
                                <Setter Property="Padding" Value="0"/>
                                <Style.BasedOn>
                                    <Style TargetType="{x:Type RepeatButton}">
                                        <Setter Property="Helpers:ThemeHelper.MouseOverBrush" Value="{telerik1:FluentResource ResourceKey={x:Static telerik:FluentResourceKey.MouseOverBrush}}"/>
                                        <Setter Property="Helpers:ThemeHelper.PressedBrush" Value="{telerik1:FluentResource ResourceKey={x:Static telerik:FluentResourceKey.PressedBrush}}"/>
                                        <Setter Property="Helpers:ThemeHelper.FocusBrush" Value="{telerik1:FluentResource ResourceKey={x:Static telerik:FluentResourceKey.AccentFocusedBrush}}"/>
                                        <Setter Property="Helpers:ThemeHelper.CornerRadius" Value="{telerik1:FluentResource ResourceKey={x:Static telerik:FluentResourceKey.CornerRadius}}"/>
                                        <Setter Property="FontFamily" Value="{telerik1:FluentResource ResourceKey={x:Static telerik:FluentResourceKey.FontFamily}}"/>
                                        <Setter Property="FontSize" Value="{telerik1:FluentResource ResourceKey={x:Static telerik:FluentResourceKey.FontSize}}"/>
                                        <Setter Property="Foreground" Value="{telerik1:FluentResource ResourceKey={x:Static telerik:FluentResourceKey.MarkerBrush}}"/>
                                        <Setter Property="Background" Value="{telerik1:FluentResource ResourceKey={x:Static telerik:FluentResourceKey.MainBrush}}"/>
                                        <Setter Property="BorderBrush" Value="{telerik1:FluentResource ResourceKey={x:Static telerik:FluentResourceKey.MainBrush}}"/>
                                        <Setter Property="BorderThickness" Value="1"/>
                                        <Setter Property="Padding" Value="5"/>
                                        <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                        <Setter Property="VerticalContentAlignment" Value="Center"/>
                                        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                                        <Setter Property="SnapsToDevicePixels" Value="True"/>
                                        <Setter Property="UseLayoutRounding" Value="True"/>
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                    <Grid>
                                                        <Border x:Name="BorderVisual" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding Helpers:ThemeHelper.CornerRadius}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                                        <Border x:Name="FocusVisual" BorderBrush="{TemplateBinding Helpers:ThemeHelper.FocusBrush}" BorderThickness="{DynamicResource {x:Static telerik:FluentResourceKey.FocusThickness}}" Background="{x:Null}" CornerRadius="{TemplateBinding Helpers:ThemeHelper.CornerRadius}" IsHitTestVisible="False" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Visibility="Collapsed"/>
                                                        <mat:FluentControl BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding Helpers:ThemeHelper.CornerRadius}" EffectMode="Glow" IsSmartClipped="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                                            <ContentPresenter x:Name="Content" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" TextElement.Foreground="{TemplateBinding Foreground}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                                        </mat:FluentControl>
                                                    </Grid>
                                                    <ControlTemplate.Triggers>
                                                        <MultiTrigger>
                                                            <MultiTrigger.Conditions>
                                                                <Condition Property="IsKeyboardFocused" Value="True"/>
                                                                <Condition Property="IsPressed" Value="False"/>
                                                                <Condition Property="IsMouseOver" Value="False"/>
                                                            </MultiTrigger.Conditions>
                                                            <Setter Property="Visibility" TargetName="FocusVisual" Value="Visible"/>
                                                        </MultiTrigger>
                                                        <Trigger Property="IsMouseOver" Value="True">
                                                            <Setter Property="Background" Value="{Binding (Helpers:ThemeHelper.MouseOverBrush), Mode=OneWay, RelativeSource={RelativeSource Self}}"/>
                                                            <Setter Property="BorderBrush" Value="{Binding (Helpers:ThemeHelper.MouseOverBrush), Mode=OneWay, RelativeSource={RelativeSource Self}}"/>
                                                        </Trigger>
                                                        <Trigger Property="IsPressed" Value="True">
                                                            <Setter Property="Background" Value="{Binding (Helpers:ThemeHelper.PressedBrush), Mode=OneWay, RelativeSource={RelativeSource Self}}"/>
                                                            <Setter Property="BorderBrush" Value="{Binding (Helpers:ThemeHelper.PressedBrush), Mode=OneWay, RelativeSource={RelativeSource Self}}"/>
                                                        </Trigger>
                                                        <MultiTrigger>
                                                            <MultiTrigger.Conditions>
                                                                <Condition Property="IsEnabled" Value="False"/>
                                                                <Condition Property="IsKeyboardFocused" Value="True"/>
                                                            </MultiTrigger.Conditions>
                                                            <Setter Property="Visibility" TargetName="FocusVisual" Value="Collapsed"/>
                                                        </MultiTrigger>
                                                        <Trigger Property="IsEnabled" Value="False">
                                                            <Setter Property="Opacity" TargetName="Content" Value="{telerik1:FluentResource ResourceKey={x:Static telerik:FluentResourceKey.DisabledOpacity}}"/>
                                                            <Setter Property="Background" Value="{telerik1:FluentResource ResourceKey={x:Static telerik:FluentResourceKey.AlternativeBrush}}"/>
                                                            <Setter Property="BorderBrush" Value="{telerik1:FluentResource ResourceKey={x:Static telerik:FluentResourceKey.AlternativeBrush}}"/>
                                                        </Trigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </Style.BasedOn>
                            </Style>
                        </Style.BasedOn>
                    </Style>
                </Setter.Value>
            </Setter>
            <Setter Property="DecreaseHandleStyle">
                <Setter.Value>
                    <Style TargetType="{x:Type RepeatButton}">
                        <Setter Property="Margin" Value="0,0,4,0"/>
                        <Setter Property="ContentTemplate">
                            <Setter.Value>
                                <DataTemplate>
                                    <telerik1:RadGlyph Glyph="&#xE016;"/>
                                </DataTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.BasedOn>
                            <Style TargetType="{x:Type RepeatButton}">
                                <Setter Property="TextOptions.TextRenderingMode" Value="ClearType"/>
                                <Setter Property="Cursor" Value="Hand"/>
                                <Setter Property="IsTabStop" Value="True"/>
                                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                                <Setter Property="Foreground" Value="{telerik1:FluentResource ResourceKey={x:Static telerik:FluentResourceKey.IconBrush}}"/>
                                <Setter Property="Background" Value="Transparent"/>
                                <Setter Property="BorderBrush" Value="Transparent"/>
                                <Setter Property="SnapsToDevicePixels" Value="True"/>
                                <Setter Property="UseLayoutRounding" Value="False"/>
                                <Setter Property="BorderThickness" Value="1"/>
                                <Setter Property="Width" Value="16"/>
                                <Setter Property="Height" Value="16"/>
                                <Setter Property="Padding" Value="0"/>
                                <Style.BasedOn>
                                    <Style TargetType="{x:Type RepeatButton}">
                                        <Setter Property="Helpers:ThemeHelper.MouseOverBrush" Value="{telerik1:FluentResource ResourceKey={x:Static telerik:FluentResourceKey.MouseOverBrush}}"/>
                                        <Setter Property="Helpers:ThemeHelper.PressedBrush" Value="{telerik1:FluentResource ResourceKey={x:Static telerik:FluentResourceKey.PressedBrush}}"/>
                                        <Setter Property="Helpers:ThemeHelper.FocusBrush" Value="{telerik1:FluentResource ResourceKey={x:Static telerik:FluentResourceKey.AccentFocusedBrush}}"/>
                                        <Setter Property="Helpers:ThemeHelper.CornerRadius" Value="{telerik1:FluentResource ResourceKey={x:Static telerik:FluentResourceKey.CornerRadius}}"/>
                                        <Setter Property="FontFamily" Value="{telerik1:FluentResource ResourceKey={x:Static telerik:FluentResourceKey.FontFamily}}"/>
                                        <Setter Property="FontSize" Value="{telerik1:FluentResource ResourceKey={x:Static telerik:FluentResourceKey.FontSize}}"/>
                                        <Setter Property="Foreground" Value="{telerik1:FluentResource ResourceKey={x:Static telerik:FluentResourceKey.MarkerBrush}}"/>
                                        <Setter Property="Background" Value="{telerik1:FluentResource ResourceKey={x:Static telerik:FluentResourceKey.MainBrush}}"/>
                                        <Setter Property="BorderBrush" Value="{telerik1:FluentResource ResourceKey={x:Static telerik:FluentResourceKey.MainBrush}}"/>
                                        <Setter Property="BorderThickness" Value="1"/>
                                        <Setter Property="Padding" Value="5"/>
                                        <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                        <Setter Property="VerticalContentAlignment" Value="Center"/>
                                        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                                        <Setter Property="SnapsToDevicePixels" Value="True"/>
                                        <Setter Property="UseLayoutRounding" Value="True"/>
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                    <Grid>
                                                        <Border x:Name="BorderVisual" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding Helpers:ThemeHelper.CornerRadius}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                                        <Border x:Name="FocusVisual" BorderBrush="{TemplateBinding Helpers:ThemeHelper.FocusBrush}" BorderThickness="{DynamicResource {x:Static telerik:FluentResourceKey.FocusThickness}}" Background="{x:Null}" CornerRadius="{TemplateBinding Helpers:ThemeHelper.CornerRadius}" IsHitTestVisible="False" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Visibility="Collapsed"/>
                                                        <mat:FluentControl BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding Helpers:ThemeHelper.CornerRadius}" EffectMode="Glow" IsSmartClipped="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                                            <ContentPresenter x:Name="Content" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" TextElement.Foreground="{TemplateBinding Foreground}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                                        </mat:FluentControl>
                                                    </Grid>
                                                    <ControlTemplate.Triggers>
                                                        <MultiTrigger>
                                                            <MultiTrigger.Conditions>
                                                                <Condition Property="IsKeyboardFocused" Value="True"/>
                                                                <Condition Property="IsPressed" Value="False"/>
                                                                <Condition Property="IsMouseOver" Value="False"/>
                                                            </MultiTrigger.Conditions>
                                                            <Setter Property="Visibility" TargetName="FocusVisual" Value="Visible"/>
                                                        </MultiTrigger>
                                                        <Trigger Property="IsMouseOver" Value="True">
                                                            <Setter Property="Background" Value="{Binding (Helpers:ThemeHelper.MouseOverBrush), Mode=OneWay, RelativeSource={RelativeSource Self}}"/>
                                                            <Setter Property="BorderBrush" Value="{Binding (Helpers:ThemeHelper.MouseOverBrush), Mode=OneWay, RelativeSource={RelativeSource Self}}"/>
                                                        </Trigger>
                                                        <Trigger Property="IsPressed" Value="True">
                                                            <Setter Property="Background" Value="{Binding (Helpers:ThemeHelper.PressedBrush), Mode=OneWay, RelativeSource={RelativeSource Self}}"/>
                                                            <Setter Property="BorderBrush" Value="{Binding (Helpers:ThemeHelper.PressedBrush), Mode=OneWay, RelativeSource={RelativeSource Self}}"/>
                                                        </Trigger>
                                                        <MultiTrigger>
                                                            <MultiTrigger.Conditions>
                                                                <Condition Property="IsEnabled" Value="False"/>
                                                                <Condition Property="IsKeyboardFocused" Value="True"/>
                                                            </MultiTrigger.Conditions>
                                                            <Setter Property="Visibility" TargetName="FocusVisual" Value="Collapsed"/>
                                                        </MultiTrigger>
                                                        <Trigger Property="IsEnabled" Value="False">
                                                            <Setter Property="Opacity" TargetName="Content" Value="{telerik1:FluentResource ResourceKey={x:Static telerik:FluentResourceKey.DisabledOpacity}}"/>
                                                            <Setter Property="Background" Value="{telerik1:FluentResource ResourceKey={x:Static telerik:FluentResourceKey.AlternativeBrush}}"/>
                                                            <Setter Property="BorderBrush" Value="{telerik1:FluentResource ResourceKey={x:Static telerik:FluentResourceKey.AlternativeBrush}}"/>
                                                        </Trigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </Style.BasedOn>
                            </Style>
                        </Style.BasedOn>
                    </Style>
                </Setter.Value>
            </Setter>
            <Setter Property="AutoToolTipContentTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <TextBlock HorizontalAlignment="Center" Text="{Binding ., StringFormat=F2}" VerticalAlignment="Center"/>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="IsTabStop" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type telerik1:RadSlider}">
                        <telerik:LayoutTransformControl x:Name="layoutControl" IsTabStop="False" RenderTransformOrigin="0.5,0">
                            <telerik:LayoutTransformControl.LayoutTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </telerik:LayoutTransformControl.LayoutTransform>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal"/>
                                </VisualStateGroup>
                                <VisualStateGroup x:Name="OrientationStates">
                                    <VisualState x:Name="Horizontal">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="LayoutTransform" Storyboard.TargetName="layoutControl">
                                                <DiscreteObjectKeyFrame KeyTime="0">
                                                    <DiscreteObjectKeyFrame.Value>
                                                        <RotateTransform Angle="0"/>
                                                    </DiscreteObjectKeyFrame.Value>
                                                </DiscreteObjectKeyFrame>
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Vertical">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="LayoutTransform" Storyboard.TargetName="layoutControl">
                                                <DiscreteObjectKeyFrame KeyTime="0">
                                                    <DiscreteObjectKeyFrame.Value>
                                                        <RotateTransform Angle="-90"/>
                                                    </DiscreteObjectKeyFrame.Value>
                                                </DiscreteObjectKeyFrame>
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="ReversedHorizontal">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="LayoutTransform" Storyboard.TargetName="layoutControl">
                                                <DiscreteObjectKeyFrame KeyTime="0">
                                                    <DiscreteObjectKeyFrame.Value>
                                                        <ScaleTransform ScaleX="-1"/>
                                                    </DiscreteObjectKeyFrame.Value>
                                                </DiscreteObjectKeyFrame>
                                            </ObjectAnimationUsingKeyFrames>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="RenderTransform" Storyboard.TargetName="BottomTickBar">
                                                <DiscreteObjectKeyFrame KeyTime="0">
                                                    <DiscreteObjectKeyFrame.Value>
                                                        <ScaleTransform ScaleX="-1"/>
                                                    </DiscreteObjectKeyFrame.Value>
                                                </DiscreteObjectKeyFrame>
                                            </ObjectAnimationUsingKeyFrames>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="RenderTransform" Storyboard.TargetName="TopTickBar">
                                                <DiscreteObjectKeyFrame KeyTime="0">
                                                    <DiscreteObjectKeyFrame.Value>
                                                        <ScaleTransform ScaleX="-1"/>
                                                    </DiscreteObjectKeyFrame.Value>
                                                </DiscreteObjectKeyFrame>
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="ReversedVertical">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="LayoutTransform" Storyboard.TargetName="layoutControl">
                                                <DiscreteObjectKeyFrame KeyTime="0">
                                                    <DiscreteObjectKeyFrame.Value>
                                                        <TransformGroup>
                                                            <ScaleTransform ScaleY="-1"/>
                                                            <RotateTransform Angle="90"/>
                                                        </TransformGroup>
                                                    </DiscreteObjectKeyFrame.Value>
                                                </DiscreteObjectKeyFrame>
                                            </ObjectAnimationUsingKeyFrames>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="RenderTransform" Storyboard.TargetName="BottomTickBar">
                                                <DiscreteObjectKeyFrame KeyTime="0">
                                                    <DiscreteObjectKeyFrame.Value>
                                                        <TransformGroup>
                                                            <ScaleTransform ScaleY="-1"/>
                                                            <RotateTransform Angle="-180"/>
                                                        </TransformGroup>
                                                    </DiscreteObjectKeyFrame.Value>
                                                </DiscreteObjectKeyFrame>
                                            </ObjectAnimationUsingKeyFrames>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="RenderTransform" Storyboard.TargetName="TopTickBar">
                                                <DiscreteObjectKeyFrame KeyTime="0">
                                                    <DiscreteObjectKeyFrame.Value>
                                                        <TransformGroup>
                                                            <ScaleTransform ScaleY="-1"/>
                                                            <RotateTransform Angle="-180"/>
                                                        </TransformGroup>
                                                    </DiscreteObjectKeyFrame.Value>
                                                </DiscreteObjectKeyFrame>
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Grid UseLayoutRounding="True">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <telerik1:RadTickBar x:Name="TopTickBar" Grid.ColumnSpan="3" Grid.Column="1" IsDirectionReversed="{TemplateBinding IsDirectionReversed}" ItemTemplate="{TemplateBinding TickTemplate}" Maximum="{TemplateBinding Maximum}" Minimum="{TemplateBinding Minimum}" RenderTransformOrigin="0.5,0.5" Style="{TemplateBinding TickBarStyle}">
                                    <telerik1:RadTickBar.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform/>
                                            <SkewTransform/>
                                            <RotateTransform/>
                                            <TranslateTransform/>
                                        </TransformGroup>
                                    </telerik1:RadTickBar.RenderTransform>
                                </telerik1:RadTickBar>
                                <ContentControl x:Name="Track" Background="#aad900" Grid.ColumnSpan="3" Grid.Column="1" Grid.Row="1" Style="{TemplateBinding TrackStyle}" VerticalAlignment="Center"/>
                                <RepeatButton x:Name="DecreaseButton" Delay="{TemplateBinding Delay}" Interval="{TemplateBinding RepeatInterval}" Grid.Row="1" Style="{TemplateBinding DecreaseHandleStyle}" Visibility="{TemplateBinding HandlesVisibility}"/>
                                <RepeatButton x:Name="LargeDecreaseButton" Grid.Column="1" Delay="{TemplateBinding Delay}" Interval="{TemplateBinding RepeatInterval}" Grid.Row="1">
                                    <RepeatButton.Style>
                                        <Style TargetType="{x:Type RepeatButton}">
                                            <Setter Property="IsTabStop" Value="False"/>
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                        <Grid Background="Transparent"/>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </RepeatButton.Style>
                                </RepeatButton>
                                <Grid Grid.Column="2" Grid.Row="1" VerticalAlignment="Center">
                                    <Thumb x:Name="SingleThumbHost" Style="{TemplateBinding ThumbStyle}" Visibility="{TemplateBinding ThumbVisibility}"/>
                                    <StackPanel x:Name="RangeThumbsPanel" Orientation="Horizontal" Visibility="Collapsed">
                                        <Thumb x:Name="RangeStartThumb" Style="{TemplateBinding ThumbStyle}" Visibility="{TemplateBinding ThumbVisibility}"/>
                                        <Thumb x:Name="RangeMiddleThumb" Style="{TemplateBinding SelectionMiddleThumbStyle}"/>
                                        <Thumb x:Name="RangeEndThumb" Style="{TemplateBinding AlternateThumbStyle}" Visibility="{TemplateBinding ThumbVisibility}"/>
                                    </StackPanel>
                                </Grid>
                                <RepeatButton x:Name="LargeIncreaseButton" Grid.Column="3" Delay="{TemplateBinding Delay}" Interval="{TemplateBinding RepeatInterval}" Grid.Row="1">
                                    <RepeatButton.Style>
                                        <Style TargetType="{x:Type RepeatButton}">
                                            <Setter Property="IsTabStop" Value="False"/>
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                        <Grid Background="Transparent"/>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </RepeatButton.Style>
                                </RepeatButton>
                                <RepeatButton x:Name="IncreaseButton" Grid.Column="4" Delay="{TemplateBinding Delay}" Interval="{TemplateBinding RepeatInterval}" Grid.Row="1" RenderTransformOrigin="0.5,0.5" Style="{TemplateBinding IncreaseHandleStyle}" Visibility="{TemplateBinding HandlesVisibility}"/>
                                <telerik1:RadTickBar x:Name="BottomTickBar" Grid.ColumnSpan="3" Grid.Column="1" IsDirectionReversed="{TemplateBinding IsDirectionReversed}" ItemTemplate="{TemplateBinding TickTemplate}" Maximum="{TemplateBinding Maximum}" Minimum="{TemplateBinding Minimum}" Grid.Row="2" RenderTransformOrigin="0.5,0.5" Style="{TemplateBinding TickBarStyle}">
                                    <telerik1:RadTickBar.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform/>
                                            <SkewTransform/>
                                            <RotateTransform/>
                                            <TranslateTransform/>
                                        </TransformGroup>
                                    </telerik1:RadTickBar.RenderTransform>
                                </telerik1:RadTickBar>
                            </Grid>
                        </telerik:LayoutTransformControl>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsSelectionRangeEnabled" Value="True">
                                <Setter Property="Visibility" TargetName="SingleThumbHost" Value="Collapsed"/>
                                <Setter Property="Visibility" TargetName="RangeThumbsPanel" Value="Visible"/>
                            </Trigger>
                            <Trigger Property="TickPlacement" Value="None">
                                <Setter Property="Visibility" TargetName="TopTickBar" Value="Collapsed"/>
                                <Setter Property="Visibility" TargetName="BottomTickBar" Value="Collapsed"/>
                            </Trigger>
                            <Trigger Property="TickPlacement" Value="Both">
                                <Setter Property="Visibility" TargetName="TopTickBar" Value="Visible"/>
                                <Setter Property="Visibility" TargetName="BottomTickBar" Value="Visible"/>
                            </Trigger>
                            <Trigger Property="TickPlacement" Value="BottomRight">
                                <Setter Property="Visibility" TargetName="TopTickBar" Value="Collapsed"/>
                                <Setter Property="Visibility" TargetName="BottomTickBar" Value="Visible"/>
                            </Trigger>
                            <Trigger Property="TickPlacement" Value="TopLeft">
                                <Setter Property="Visibility" TargetName="TopTickBar" Value="Visible"/>
                                <Setter Property="Visibility" TargetName="BottomTickBar" Value="Collapsed"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </UserControl.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="45"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <Grid Grid.Row="0" Background="White">
            <telerik1:RadToggleSwitchButton VerticalAlignment="Top" HorizontalAlignment="Left" Margin="5, 14, 0, 0" IsChecked="{Binding IsHelperON}" ContentPosition="Both" CheckedContent="Helper ON" UncheckedContent="Helper OFF" TrackWidth="40" BorderBrush="#aad900"/>
        </Grid>

        <Grid Grid.Row="1" Background="#aa000000" Panel.ZIndex="1">
            <Grid.Style>
                <Style TargetType="{x:Type Grid}">
                    <Setter Property="Visibility" Value="Collapsed"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsHelperON}" Value="False">
                            <Setter Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Grid.Style>

            <TextBlock FontSize="36" Text="Helper OFF" Foreground="White" VerticalAlignment="Center" HorizontalAlignment="Center"/>
        </Grid>

        <Grid Width="1100" Height="420" Grid.Row="1" HorizontalAlignment="Center" VerticalAlignment="Center">
            <Grid.RowDefinitions>
                <RowDefinition Height="*"/>
                <RowDefinition Height="180"/>
            </Grid.RowDefinitions>

            <Border Grid.Row="0" BorderBrush="#aad900" BorderThickness="1">
                <Grid Margin="200, 20">
                    <Grid>
                        <Grid.Style>
                            <Style TargetType="{x:Type Grid}">
                                <Setter Property="Visibility" Value="Visible"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding LatestPatternTime}" Value="{x:Null}">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Grid.Style>

                        <Grid.RowDefinitions>
                            <RowDefinition Height="3*"/>
                            <RowDefinition Height="4*"/>
                            <RowDefinition Height="4*"/>
                        </Grid.RowDefinitions>

                        <Grid Grid.Row="0">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="30"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>

                            <TextBlock Grid.Column="0" FontSize="30" Text="{Binding CurrentPhase, StringFormat=현재 패턴 페이즈 : \{0\} 페이즈}" VerticalAlignment="Center" HorizontalAlignment="Right"/>
                            <Separator Grid.Column="1" Background="#aad900" Width="1" Height="40" VerticalAlignment="Center"/>
                            <TextBlock Grid.Column="2" FontSize="30" VerticalAlignment="Center" HorizontalAlignment="Left">
                                <TextBlock.Text>
                                    <MultiBinding StringFormat="마지막 패턴 시간 {0:00}:{1:00}">
                                        <Binding Path="LatestPatternTime.Minutes" />
                                        <Binding Path="LatestPatternTime.Seconds" />
                                    </MultiBinding>
                                </TextBlock.Text>
                            </TextBlock>
                        </Grid>


                        <Grid Grid.Row="1">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="3*"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>

                            <TextBlock Grid.Column="0" FontSize="42" Text="다음 패턴 예정 시간" VerticalAlignment="Center"/>
                            <TextBlock Grid.Column="1" FontSize="42" VerticalAlignment="Center" HorizontalAlignment="Right">
                                <TextBlock.Text>
                                    <MultiBinding StringFormat="{}{0:00}:{1:00}">
                                        <Binding Path="NextPatternTime.Minutes" />
                                        <Binding Path="NextPatternTime.Seconds" />
                                    </MultiBinding>
                                </TextBlock.Text>
                            </TextBlock>
                        </Grid>

                        <Grid Grid.Row="2">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="3*"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>

                            <TextBlock Grid.Column="0" FontSize="42" Text="다음 패턴까지 남은 시간" VerticalAlignment="Center"/>
                            <TextBlock Grid.Column="1" FontSize="42" Text="{Binding RemainTimeSeconds, StringFormat=\{0\}초}" VerticalAlignment="Center" HorizontalAlignment="Right"/>
                        </Grid>
                    </Grid>

                    <Grid>
                        <Grid.Style>
                            <Style TargetType="{x:Type Grid}">
                                <Setter Property="Visibility" Value="Collapsed"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding LatestPatternTime}" Value="{x:Null}">
                                        <Setter Property="Visibility" Value="Visible"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Grid.Style>

                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>

                        <TextBlock Grid.Row="0" FontSize="36" Text="첫번째 낫 패턴 (27:14) 때" VerticalAlignment="Bottom" HorizontalAlignment="Center"/>
                        <TextBlock Grid.Row="1" FontSize="36" Text="패턴 시간 체크를 눌러주세요." VerticalAlignment="Top" HorizontalAlignment="Center"/>
                    </Grid>
                </Grid>
            </Border>

            <StackPanel Grid.Row="1" Orientation="Horizontal" VerticalAlignment="Top" HorizontalAlignment="Left" Margin="0, 15, 0, 0">
                <TextBlock Text="UI Bar 배경 투명도" VerticalAlignment="Center"/>
                <StackPanel Orientation="Horizontal" Margin="10, 0, 0, 0">
                    <telerik1:RadSlider Width="90" Value="{Binding UIBarTransparency}" TickFrequency="10" TickPlacement="None" Minimum="0" Maximum="100" VerticalAlignment="Center" Style="{DynamicResource RadSliderHillaStyle}"/>
                    <Border BorderBrush="#aad900" BorderThickness="1" Margin="5, 0, 0, 0">
                        <TextBox Width="40" Text="{Binding UIBarTransparency, UpdateSourceTrigger=PropertyChanged}" Foreground="#f86475" Background="#211d1e" VerticalAlignment="Center" HorizontalContentAlignment="Center" BorderThickness="0" Padding="2"/>
                    </Border>
                </StackPanel>
            </StackPanel>

            <StackPanel Grid.Row="1" Orientation="Horizontal" VerticalAlignment="Top" HorizontalAlignment="Right" Margin="0, 10, 0, 0">
                <telerik1:RadButton Width="70" Content="초기화" Command="{Binding ResetCommand}" Foreground="#f86475" Margin="0, 0, 5, 0" Padding="10, 7, 10, 2" VerticalContentAlignment="Center"/>
                <telerik1:RadButton Width="70" Content="UI Bar" Command="{Binding OpenHillaUIBarCommand}" Foreground="#f86475" Padding="10, 7, 10, 2" VerticalContentAlignment="Center"/>
            </StackPanel>

            <StackPanel Grid.Row="1" Orientation="Horizontal" VerticalAlignment="Bottom" HorizontalAlignment="Center">
                <StackPanel Orientation="Vertical">
                    <TextBlock Text="이전 페이즈" HorizontalAlignment="Center" Margin="0, 0, 0, 5"/>
                    <telerik1:RadButton Width="100" Height="100" Grid.Column="0" Command="{Binding BackKeyCommand}">

                        <telerik1:RadButton.Style>
                            <Style TargetType="{x:Type telerik1:RadButton}" BasedOn="{StaticResource RadButtonHillaStyle}">
                                <Setter Property="IsEnabled" Value="True"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding CurrentPhase}" Value="1">
                                        <Setter Property="IsEnabled" Value="False"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding LatestPatternTime}" Value="{x:Null}">
                                        <Setter Property="IsEnabled" Value="False"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </telerik1:RadButton.Style>
                        <Image Source="/MapleUtility;component/Plugins/Images/Back.png" Margin="20"/>

                    </telerik1:RadButton>
                    <telerik1:RadButton Width="100" Height="30" Margin="0, 5, 0, 0" Foreground="#f86475" Content="{Binding BackKeyString}" Command="{Binding BackKeySettingCommand}" CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"/>
                </StackPanel>

                <StackPanel Orientation="Vertical" Margin="100, 10, 100, 0">
                    <TextBlock Text="패턴 시간 체크" HorizontalAlignment="Center" Margin="0, 0, 0, 5"/>
                    <telerik1:RadButton Width="100" Height="100" Grid.Column="0" Command="{Binding ScytheKeyCommand}">
                        <Image Source="/MapleUtility;component/Plugins/Images/Scythe.png" Margin="20"/>
                    </telerik1:RadButton>
                    <telerik1:RadButton Width="100" Height="30" Margin="0, 5, 0, 0" Foreground="#f86475" Content="{Binding ScytheKeyString}" Command="{Binding ScytheKeySettingCommand}" CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"/>
                </StackPanel>

                <StackPanel Orientation="Vertical">
                    <TextBlock Text="다음 페이즈" HorizontalAlignment="Center" Margin="0, 0, 0, 5"/>
                    <telerik1:RadButton Width="100" Height="100" Grid.Column="0" Command="{Binding NextKeyCommand}">

                        <telerik1:RadButton.Style>
                            <Style TargetType="{x:Type telerik1:RadButton}" BasedOn="{StaticResource RadButtonHillaStyle}">
                                <Setter Property="IsEnabled" Value="True"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding CurrentPhase}" Value="3">
                                        <Setter Property="IsEnabled" Value="False"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding LatestPatternTime}" Value="{x:Null}">
                                        <Setter Property="IsEnabled" Value="False"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </telerik1:RadButton.Style>
                        <Image Source="/MapleUtility;component/Plugins/Images/Next.png" Margin="20"/>

                    </telerik1:RadButton>
                    <telerik1:RadButton Width="100" Height="30" Margin="0, 5, 0, 0" Foreground="#f86475" Content="{Binding NextKeyString}" Command="{Binding NextKeySettingCommand}" CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"/>
                </StackPanel>
            </StackPanel>
        </Grid>
    </Grid>
</UserControl>

    